{"version":3,"sources":["components/PostItem.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","api/comments.ts","components/CommentItem.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","api/posts.ts","App.tsx","api/users.ts","index.tsx"],"names":["PostItem","memo","props","post","selectedPost","setSelectedPostId","id","title","className","type","cn","onClick","postClicked","isFirstClick","handleClick","PostsList","posts","useEffect","map","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","addComment","newComment","CommentItem","comment","setComments","removeComment","commentId","deleteComment","currentComments","filter","item","href","email","name","NewCommentForm","useState","author","setAuthor","setEmail","setComment","isErrorOnAuthor","setIsErrorOnAuthor","isErrorOnEmail","setIsErrorOnEmail","isErrorOnComment","setIsErrorOnComment","isLoading","setIsLoading","isValidValue","value","Boolean","trim","addNewComment","a","addedComment","Error","onSubmit","event","preventDefault","postId","htmlFor","placeholder","onChange","currentTarget","PostDetails","comments","isErrorOnLoading","setIsErrorOnLoading","isLoadingFinish","setIsLoadingFinish","isButtonClicked","setIsButtonClicked","loadComments","loadedComments","length","UserSelector","users","selectedUser","onUserSelect","isDropdownOpened","setIsDropdownOpened","handleDocumentClick","document","addEventListener","removeEventListener","status","role","user","getPosts","userId","App","setUsers","setPosts","selectedUserId","setSelectedUserId","isPostsLoading","setIsPostsLoading","isLoadingPostsFinish","setIsLoadingPostsFinish","isErrorOnPostsLoading","setIsErrorOnPostsLoading","selectedPostId","loadUsers","loadedUsers","loadPosts","loadedPosts","useMemo","find","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.02bb6bdb.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport cn from 'classnames';\n\nimport { Post } from '../types/Post';\n\ntype Props = {\n  post: Post;\n  selectedPost: Post | undefined;\n  setSelectedPostId: React.Dispatch<React.SetStateAction<number | null>>;\n};\n\nexport const PostItem: React.FC<Props> = memo((props) => {\n  const {\n    post,\n    selectedPost,\n    setSelectedPostId,\n  } = props;\n\n  const handleClick = (postClicked: Post) => {\n    const isFirstClick = post.id !== selectedPost?.id;\n\n    if (isFirstClick) {\n      setSelectedPostId(postClicked.id);\n    } else {\n      setSelectedPostId(null);\n    }\n  };\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{post.id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {post.title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={cn(\n            'button is-link',\n            { 'is-light': selectedPost?.id !== post.id },\n          )}\n          onClick={() => handleClick(post)}\n        >\n          {selectedPost?.id === post.id\n            ? 'Close'\n            : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n});\n","import React, { memo, useEffect } from 'react';\n\nimport { PostItem } from './PostItem';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | undefined;\n  setSelectedPostId: React.Dispatch<React.SetStateAction<number | null>>;\n};\n\nexport const PostsList: React.FC<Props> = memo((props) => {\n  const {\n    posts,\n    selectedPost,\n    setSelectedPostId,\n  } = props;\n\n  useEffect(() => {\n    setSelectedPostId(null);\n  }, []);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <PostItem\n              post={post}\n              key={post.id}\n              selectedPost={selectedPost}\n              setSelectedPostId={setSelectedPostId}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n","import { memo } from 'react';\nimport './Loader.scss';\n\nexport const Loader = memo(() => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n));\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (newComment: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', newComment);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { memo } from 'react';\n\nimport { Comment } from '../types/Comment';\nimport { deleteComment } from '../api/comments';\n\ntype Props = {\n  comment: Comment;\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n};\n\nexport const CommentItem: React.FC<Props> = memo((props) => {\n  const { comment, setComments } = props;\n\n  const removeComment = (commentId: number) => {\n    deleteComment(commentId);\n    setComments(currentComments => currentComments.filter(item => {\n      return item.id !== commentId;\n    }));\n  };\n\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a\n          href={`mailto:${comment.email}`}\n          data-cy=\"CommentAuthor\"\n        >\n          {comment.name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => removeComment(comment.id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {comment.body}\n      </div>\n    </article>\n  );\n});\n","import React, { memo, useState } from 'react';\nimport cn from 'classnames';\n\nimport { Post } from '../types/Post';\nimport { addComment } from '../api/comments';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  post: Post;\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = memo((props) => {\n  const { post, setComments } = props;\n\n  const [author, setAuthor] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [isErrorOnAuthor, setIsErrorOnAuthor] = useState(false);\n  const [isErrorOnEmail, setIsErrorOnEmail] = useState(false);\n  const [isErrorOnComment, setIsErrorOnComment] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const isValidValue = (value: string) => {\n    return Boolean(value.trim());\n  };\n\n  const addNewComment = async (newComment: Omit<Comment, 'id'>) => {\n    try {\n      setIsLoading(true);\n\n      const addedComment = await addComment(newComment);\n\n      setComments(currentComments => [\n        ...currentComments,\n        addedComment,\n      ]);\n    } catch (error) {\n      throw new Error('Can\\'t add new comment');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!isValidValue(author)) {\n      setIsErrorOnAuthor(true);\n    }\n\n    if (!isValidValue(email)) {\n      setIsErrorOnEmail(true);\n    }\n\n    if (!isValidValue(comment)) {\n      setIsErrorOnComment(true);\n    }\n\n    if (!isValidValue(author)\n      || !isValidValue(email)\n      || !isValidValue(comment)\n    ) {\n      return;\n    }\n\n    addNewComment({\n      postId: post.id,\n      name: author,\n      email,\n      body: comment,\n    });\n\n    setComment('');\n  };\n\n  const handleClearAll = () => {\n    setAuthor('');\n    setEmail('');\n    setComment('');\n    setIsErrorOnAuthor(false);\n    setIsErrorOnEmail(false);\n    setIsErrorOnComment(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn(\n              'input',\n              { 'is-danger': isErrorOnAuthor },\n            )}\n            value={author}\n            onChange={(event) => {\n              setAuthor(event.currentTarget.value);\n              setIsErrorOnAuthor(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isErrorOnAuthor && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isErrorOnAuthor && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn(\n              'input',\n              { 'is-danger': isErrorOnEmail },\n            )}\n            value={email}\n            onChange={(event) => {\n              setEmail(event.currentTarget.value);\n              setIsErrorOnEmail(false);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isErrorOnEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isErrorOnEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn(\n              'input',\n              { 'is-danger': isErrorOnComment },\n            )}\n            value={comment}\n            onChange={(event) => {\n              setComment(event.currentTarget.value);\n              setIsErrorOnComment(false);\n            }}\n          />\n        </div>\n\n        {isErrorOnComment && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearAll}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n});\n","import React, { useState, useEffect, memo } from 'react';\n\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { Loader } from './Loader';\nimport { CommentItem } from './CommentItem';\nimport { NewCommentForm } from './NewCommentForm';\nimport { getComments } from '../api/comments';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = memo(({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isErrorOnLoading, setIsErrorOnLoading] = useState(false);\n  const [isLoadingFinish, setIsLoadingFinish] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isButtonClicked, setIsButtonClicked] = useState(false);\n\n  const loadComments = async () => {\n    try {\n      setIsErrorOnLoading(false);\n      setIsLoading(true);\n\n      const loadedComments = await getComments(post.id);\n\n      setIsLoading(false);\n      setComments(loadedComments);\n    } catch (error) {\n      setIsErrorOnLoading(true);\n      setIsLoading(false);\n    } finally {\n      setIsLoadingFinish(true);\n    }\n  };\n\n  useEffect(() => {\n    loadComments();\n    setComments([]);\n    setIsLoadingFinish(false);\n    setIsButtonClicked(false);\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {!isLoading && isErrorOnLoading && (\n            <div\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              Something went wrong\n            </div>\n          )}\n\n          {!isLoading\n            && !isErrorOnLoading\n            && comments.length === 0\n            && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )}\n\n          {comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <CommentItem\n                  comment={comment}\n                  key={comment.id}\n                  setComments={setComments}\n                />\n              ))}\n            </>\n          )}\n\n          {isLoadingFinish && !isErrorOnLoading && !isButtonClicked && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsButtonClicked(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isButtonClicked && (\n          <NewCommentForm\n            setComments={setComments}\n            post={post}\n          />\n        )}\n      </div>\n    </div>\n  );\n});\n","import React, { useState, useEffect, memo } from 'react';\nimport cn from 'classnames';\n\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  selectedUser: User | undefined;\n  onUserSelect: React.Dispatch<React.SetStateAction<number | null>>;\n};\n\nexport const UserSelector: React.FC<Props> = memo((props) => {\n  const {\n    users,\n    selectedUser,\n    onUserSelect,\n  } = props;\n\n  const [isDropdownOpened, setIsDropdownOpened] = useState(false);\n\n  useEffect(() => {\n    if (!isDropdownOpened) {\n      return;\n    }\n\n    const handleDocumentClick = () => {\n      setIsDropdownOpened(false);\n    };\n\n    document.addEventListener('click', handleDocumentClick);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n    };\n  }, [isDropdownOpened]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn(\n        'dropdown',\n        { 'is-active': isDropdownOpened },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setIsDropdownOpened(status => !status);\n          }}\n        >\n          <span>\n            {selectedUser\n              ? selectedUser.name\n              : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={cn(\n                'dropdown-item',\n                { 'is-active': selectedUser?.id === user.id },\n              )}\n              onClick={() => {\n                onUserSelect(user.id);\n                setIsDropdownOpened(false);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\n  const [isLoadingPostsFinish, setIsLoadingPostsFinish] = useState(false);\n  const [isErrorOnPostsLoading, setIsErrorOnPostsLoading] = useState(false);\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n\n  const loadUsers = async () => {\n    try {\n      const loadedUsers = await getUsers();\n\n      setUsers(loadedUsers);\n    } catch (error) {\n      throw new Error('Can\\'t load users');\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const loadPosts = async (userId: number) => {\n    try {\n      setIsPostsLoading(true);\n      setIsLoadingPostsFinish(false);\n\n      const loadedPosts = await getPosts(userId);\n\n      setPosts(loadedPosts);\n    } catch (error) {\n      setIsErrorOnPostsLoading(true);\n    } finally {\n      setIsPostsLoading(false);\n      setIsLoadingPostsFinish(true);\n    }\n  };\n\n  const selectedUser = useMemo(() => (\n    users.find(user => user.id === selectedUserId)\n  ), [selectedUserId]);\n\n  useEffect(() => {\n    if (selectedUser) {\n      loadPosts(selectedUser.id);\n    }\n  }, [selectedUser]);\n\n  const selectedPost = useMemo(() => (\n    posts.find(post => post.id === selectedPostId)\n  ), [selectedPostId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  onUserSelect={setSelectedUserId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isPostsLoading && <Loader />}\n\n                {isErrorOnPostsLoading\n                  && isLoadingPostsFinish\n                  && (\n                    <div\n                      className=\"notification is-danger\"\n                      data-cy=\"PostsLoadingError\"\n                    >\n                      Something went wrong!\n                    </div>\n                  )}\n\n                {isLoadingPostsFinish\n                  && !isErrorOnPostsLoading\n                  && posts.length === 0\n                  && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )}\n\n                {posts.length > 0 && isLoadingPostsFinish && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPostId={setSelectedPostId}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost && selectedUser\n                  && selectedPost.userId === selectedUser.id,\n              },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={selectedPost}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}